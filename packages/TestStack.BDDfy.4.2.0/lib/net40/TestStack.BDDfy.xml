<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestStack.BDDfy</name>
    </assembly>
    <members>
        <member name="M:TestStack.BDDfy.BDDfyExtensions.BDDfy(System.Object,System.String)">
            <summary>
            Extension method to BDDfy an object instance.
            </summary>
            <param name="testObject">The test object representing a scenario.</param>
            <param name="scenarioTitle">Overrides the default scenario title and is displayed in the reports.</param>
            <returns></returns>
        </member>
        <member name="M:TestStack.BDDfy.BDDfyExtensions.BDDfy``1(System.Object,System.String)">
            <summary>
            Extension method to BDDfy an object instance.
            </summary>
            <typeparam name="TStory">The type representing the story.</typeparam>
            <param name="testObject">The test object representing a scenario.</param>
            <param name="scenarioTitle">Overrides the default scenario title and is displayed in the reports.</param>
            <returns></returns>
        </member>
        <member name="P:TestStack.BDDfy.Configuration.TestRunnerFactory.StopExecutionOnFailingThen">
            <summary>
            Set to true if you want the execution pipleline to stop when a Then step fails. Defaulted to false
            </summary>
        </member>
        <member name="M:TestStack.BDDfy.Processors.Disposer.Dispose(TestStack.BDDfy.Scenario)">
            <summary>
            Runs all the dispose methods in the scenario
            </summary>
            <param name="scenario"></param>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:TestStack.BDDfy.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:TestStack.BDDfy.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:TestStack.BDDfy.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:TestStack.BDDfy.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:TestStack.BDDfy.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:TestStack.BDDfy.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:TestStack.BDDfy.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:TestStack.BDDfy.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:TestStack.BDDfy.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:TestStack.BDDfy.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Reporters.Html.HtmlReportResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.classic_css_min">
            <summary>
              Looks up a localized string similar to body{max-width:100%;background-color:#fff;font-family:Verdana,Arial,Helvetica,sans-serif;font-size:10pt;margin:0;padding:0;padding-bottom:40px}ul{padding:5px;margin:5px;border:1px solid #d0d0d0;background-color:#f0f0f0;-ms-border-radius:10px;border-radius:10px}li{list-style-type:none}#main{width:100%;height:100%}.header,.footer{background:#679bdb;background:-moz-linear-gradient(top,#679bdb 1%,#3b77a5 100%);background:-webkit-gradient(linear,left top,left bottom,color-stop(1%,#679bdb),color-stop(100%,#3b77a5 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.classic_js_min">
            <summary>
              Looks up a localized string similar to $(function(){$(&quot;.canToggle&quot;).each(function(){var n=$(&quot;#&quot;+$(this).data(&quot;toggle-target&quot;));n.hide();$(this).click(function(){n.toggle(200)})});$(&quot;.expandAll&quot;).click(function(){$(&quot;.steps&quot;).css(&quot;display&quot;,&quot;&quot;)});$(&quot;.collapseAll&quot;).click(function(){$(&quot;.steps&quot;).css(&quot;display&quot;,&quot;none&quot;)});$(&quot;ul.resultSummary li:not(&apos;.storySummary&apos;):not(&apos;.scenarioSummary&apos;)&quot;).append(&quot;&lt;input type=&apos;checkbox&apos; class=&apos;cbx_toggle&apos; checked/&gt;&quot;);$(&quot;.cbx_toggle&quot;).click(function(){var n=$(this),t=n.closest(&quot;li&quot;).attr(&quot;class&quot;);$(&quot;#testResult div.scena [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.CustomJavascriptComment">
            <summary>
              Looks up a localized string similar to If you drop a custom Javascript named BDDfyCustom.js in your output folder it gets embedded here. This way you can apply some custom Javascript logic to your html report..
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.CustomStylesheetComment">
            <summary>
              Looks up a localized string similar to If you drop a custom stylesheet named BDDfyCustom.css in your output folder it gets embedded here. This way you can apply some custom styles over your html report..
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.jquery_2_1_0_min">
             <summary>
               Looks up a localized string similar to /*! jQuery v2.1.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
            !function(a,b){&quot;object&quot;==typeof module&amp;&amp;&quot;object&quot;==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(&quot;jQuery requires a window with a document&quot;);return b(a)}:b(a)}(&quot;undefined&quot;!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k=&quot;&quot;.trim,l={},m=a.document,n=&quot;2.1.0&quot;,o=function(a,b){return new o.fn.init( [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.metro_css_min">
            <summary>
              Looks up a localized string similar to html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Reporters.Html.HtmlReportResources.metro_js_min">
            <summary>
              Looks up a localized string similar to $(function(){$(&quot;.canToggle&quot;).each(function(){var n=$(&quot;#&quot;+$(this).data(&quot;toggle-target&quot;));n.hide();$(this).click(function(){n.toggle(200)})});$(&quot;.expandAll&quot;).click(function(){$(&quot;.steps&quot;).css(&quot;display&quot;,&quot;&quot;)});$(&quot;.collapseAll&quot;).click(function(){$(&quot;.steps&quot;).css(&quot;display&quot;,&quot;none&quot;)});$(&quot;#filterOptions li input&quot;).click(function(){var n=$(this),t=n.data(&quot;target-class&quot;);$(&quot;div.scenario .&quot;+t).parent().toggle(n.prop(&quot;checked&quot;))})});
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.Reporters.MarkDown.MarkDownReporter">
            <summary>
            This is a custom reporter that shows you how easily you can create a custom report.
            Just implement IBatchProcessor and you are done
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.ExampleAction">
            <summary>
            Allows examples to contain actions which can be performed
            </summary>
        </member>
        <member name="M:TestStack.BDDfy.IFluentStepBuilder`1.Given(System.Linq.Expressions.Expression{System.Func{TestStack.BDDfy.ExampleAction}})">
             <summary>
             Allows examples to provide steps, i.e 
             'When &lt;action is performed%gt;' 
            
             | Action is performed |
             | Do Blah             |
             | Do Other            | 
             Search for ExampleAction on the BDDfy wiki for more information
             </summary>
        </member>
        <member name="M:TestStack.BDDfy.IFluentStepBuilder`1.When(System.Linq.Expressions.Expression{System.Func{TestStack.BDDfy.ExampleAction}})">
             <summary>
             Allows examples to provide steps, i.e 
             'When &lt;action is performed&gt;' 
            
             | Action is performed |
             | Do Blah             |
             | Do Other            | 
             Search for ExampleAction on the BDDfy wiki for more information
             </summary>
        </member>
        <member name="M:TestStack.BDDfy.IFluentStepBuilder`1.Then(System.Linq.Expressions.Expression{System.Func{TestStack.BDDfy.ExampleAction}})">
             <summary>
             Allows examples to provide steps, i.e 
             'When &lt;action is performed%gt;' 
            
             | Action is performed |
             | Do Blah             |
             | Do Other            | 
             Search for ExampleAction on the BDDfy wiki for more information
             </summary>
        </member>
        <member name="M:TestStack.BDDfy.IFluentStepBuilder`1.And(System.Linq.Expressions.Expression{System.Func{TestStack.BDDfy.ExampleAction}})">
             <summary>
             Allows examples to provide steps, i.e 
             'When &lt;action is performed%gt;' 
            
             | Action is performed |
             | Do Blah             |
             | Do Other            | 
             Search for ExampleAction on the BDDfy wiki for more information
             </summary>
        </member>
        <member name="M:TestStack.BDDfy.IFluentStepBuilder`1.But(System.Linq.Expressions.Expression{System.Func{TestStack.BDDfy.ExampleAction}})">
             <summary>
             Allows examples to provide steps, i.e 
             'When &lt;action is performed%gt;' 
            
             | Action is performed |
             | Do Blah             |
             | Do Other            | 
             Search for ExampleAction on the BDDfy wiki for more information
             </summary>
        </member>
        <member name="M:TestStack.BDDfy.IFluentStepBuilder`1.TearDownWith(System.Linq.Expressions.Expression{System.Func{TestStack.BDDfy.ExampleAction}})">
             <summary>
             Allows examples to provide steps, i.e 
             'When &lt;action is performed%gt;' 
            
             | Action is performed |
             | Do Blah             |
             | Do Other            | 
             Search for ExampleAction on the BDDfy wiki for more information
             </summary>
        </member>
        <member name="M:TestStack.BDDfy.StepExecutor.Execute(TestStack.BDDfy.Step,System.Object)">
            <summary>
            Executes the step. If you'd like to run your own custom logic before/after each step, 
            override this method and call the base method within your implementation.
            </summary>
        </member>
        <member name="P:TestStack.BDDfy.Story.Namespace">
            <summary>
            Currently used only when scenario doesn't have a story and we use the namespace instead
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.AsyncTestSyncContext">
            <summary>
            Implementation from xUnit 2.0
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.ExecutableAttributeStepScanner">
            <summary>
            Uses reflection to scan scenario class for steps by looking for
            ExecutableAttribute on methods
            </summary>
            <remarks>
            You can use attributes either when your method name does not comply with the
            conventions or when you want to provide a step text that reflection would not be
            able to create for you. You can override step text using executable attributes.
            </remarks>
            <example>
            <code>
            [Given(Title = "Given the account balance is $10")]
            void GivenTheAccountBalanceIs10()
            {
               _card = new Card(true, 10);
            }
            </code>
            </example>
        </member>
        <member name="T:TestStack.BDDfy.FluentScanner`1">
            <summary>
            Provides an alternative method of implementing stories and scenarios.
            </summary>
            <remarks>
            Reflecting scanners run in a pipeline which means you can mix and match their
            usage in your scenario; however, when you use FluentStepScanner, BDDfy does not
            use other scanners which means method names and attributes are ignored for
            scanning methods. You are in full control of what steps you want
            run and in what order.
            </remarks>
            <typeparam name="TScenario"></typeparam>
            <example>
            <code>
            [Fact]
            public void AccountHasSufficientFund()
            {
                this.Given(s => s.GivenTheAccountBalanceIs(100), GivenTheAccountBalanceIsTitleTemplate)
                        .And(s => s.AndTheCardIsValid())
                        .And(s => s.AndTheMachineContains(100), AndTheMachineContainsEnoughMoneyTitleTemplate)
                    .When(s => s.WhenTheAccountHolderRequests(20), WhenTheAccountHolderRequestsTitleTemplate)
                    .Then(s => s.TheAtmShouldDispense(20), "Then the ATM should dispense $20")
                        .And(s => s.AndTheAccountBalanceShouldBe(80), "And the account balance should be $80")
                        .And(s => s.ThenCardIsRetained(false), AndTheCardShouldBeReturnedTitleTemplate)
                    .BDDfy(storyCategory: "ATM");
            }
            </code>
            </example>
        </member>
        <member name="T:TestStack.BDDfy.IgnoreStepAttribute">
            <summary>
            A method attribute used to specify to the ExecutableAttributeStepScanner that it should ignore a method as a step
            </summary>
        </member>
        <member name="T:TestStack.BDDfy.MethodNameStepScanner">
            <summary>
            Uses reflection to scan a scenario class for steps using method name conventions
            </summary>
            <remarks>
            Method names starting with the following words are considered as steps and are
            reported: 
            <list type="bullet">
            <item>
            <description><i>Given: </i>setup step </description></item>
            <item>
            <description><i>AndGiven: </i>setup step running after 'Given' steps
            </description></item>
            <item>
            <description><i>When: </i>state transition step </description></item>
            <item>
            <description><i>AndWhen: </i>state transition step running after 'When' steps
            </description></item>
            <item>
            <description><i>Then: </i>asserting step </description></item>
            <item>
            <description><i>And: </i>asserting step running after 'Then' steps
            </description></item></list>
            <para>A method ending with <i>Context </i>is considered as a setup method (not
            reported). </para>
            <para>A method starting with <i>Setup </i>is considered as a setup method (not
            reported). </para>
            <para>A method starting with <i>TearDown </i>is considered as a finally method
            which is run after all the other steps (not reported). </para>
            </remarks>
        </member>
    </members>
</doc>
